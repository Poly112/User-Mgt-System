#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("user-management-system:server");
const http = require("http");

/**
 * Listen on provided port, on all network interfaces.
 */

// Importing my sequelize to initialize it here
const { sequelize } = require("../models/index");

async function main() {
    try {
        await sequelize.authenticate();
        console.log(`Database connected`);
    } catch (error) {
        throw new Error(error);
    }
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "8080");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

/////////////////////
/**
 * Scaling with node clusters
 */

const cluster = require("cluster");
const os = require("os");

// Get number of CPUs
const numCpu = os.cpus().length;

if (cluster.isMaster) {
    for (let i = 0; i < numCpu; i++) {
        cluster.fork();
    }
} else {
    server.listen(port, () => {
        main();
        console.log(`server started process ${process.pid} on port ${port}`);
    });
    cluster.on("exit", () => {
        cluster.fork();
    });
    server.on("error", onError);
    server.on("listening", onListening);
}

/////////////////////////

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
}
